From 514b0c9d93d1235006dd83b4d2c54d971e4f3b4e Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Tue, 1 Oct 2019 13:35:49 +0200
Subject: [PATCH 03/24] Add (partial, cam id is hardcoded) support for Asus ZF6
 motor camera

Change-Id: Iea6e1370780a1d16f728748d1d948d092532d8fe
---
 .../camera/libcameraservice/CameraService.cpp | 26 +++++++++++++++++++
 .../camera/libcameraservice/CameraService.h   |  3 +++
 2 files changed, 29 insertions(+)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index fb271c6..4d44f7e 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -28,6 +28,7 @@
 #include <sstream>
 #include <string>
 #include <sys/types.h>
+#include <sys/wait.h>
 #include <inttypes.h>
 #include <pthread.h>
 #include <poll.h>
@@ -194,6 +195,7 @@ CameraService::CameraService(
         AttributionAndPermissionUtilsEncapsulator(attributionAndPermissionUtils == nullptr ?
                 std::make_shared<AttributionAndPermissionUtils>()\
                 : attributionAndPermissionUtils),
+        mPhysicalFrontCamStatus(false),
         mCameraServiceProxyWrapper(cameraServiceProxyWrapper == nullptr ?
                 std::make_shared<CameraServiceProxyWrapper>() : cameraServiceProxyWrapper),
         mEventLog(DEFAULT_EVENT_LOG_LENGTH),
@@ -2753,6 +2755,7 @@ Status CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const std::str
             mServiceLock.lock();
         } else {
             // Otherwise, add client to active clients list
+            physicalFrontCam(cameraId == "1");
             finishConnectLocked(client, partial, oomScoreOffset, systemNativeClient);
         }
 
@@ -2879,6 +2882,27 @@ status_t CameraService::addOfflineClient(const std::string &cameraId,
     return OK;
 }
 
+void CameraService::physicalFrontCam(bool on) {
+    if(on == mPhysicalFrontCamStatus) return;
+    mPhysicalFrontCamStatus = on;
+
+    if(access("/dev/asusMotoDrv", F_OK) == 0) {
+        int pid = fork();
+        if(pid == 0) {
+            const char* cmd[] = {
+                "/system/bin/asus-motor",
+                "0",
+                NULL
+            };
+            cmd[1] = on ? "0" : "1";
+            execve("/system/bin/asus-motor", (char**)cmd, environ);
+            _exit(1);
+        } else {
+            waitpid(pid, NULL, 0);
+        }
+    }
+}
+
 Status CameraService::turnOnTorchWithStrengthLevel(const std::string& unresolvedCameraId,
         int32_t torchStrength, const sp<IBinder>& clientBinder,
         const AttributionSourceState& clientAttribution, int32_t devicePolicy) {
@@ -4241,6 +4265,8 @@ binder::Status CameraService::BasicClient::disconnect() {
     }
     mDisconnected = true;
 
+    sCameraService->physicalFrontCam(false);
+
     sCameraService->removeByClient(this);
     sCameraService->logDisconnected(mCameraIdStr, mCallingPid, getPackageName());
     if (!flags::camera_multi_client() || !mSharedMode || (mSharedMode &&
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index fddf779..ec50ba7 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -298,6 +298,9 @@ public:
     // Register an offline client for a given active camera id
     status_t addOfflineClient(const std::string &cameraId, sp<BasicClient> offlineClient);
 
+    bool mPhysicalFrontCamStatus;
+    void physicalFrontCam(bool on);
+
     /////////////////////////////////////////////////////////////////////
     // Client functionality
 
-- 
2.34.1

