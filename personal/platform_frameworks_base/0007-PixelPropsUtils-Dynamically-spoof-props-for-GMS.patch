From b341192118035cb37743cd91a61292e40ac54b9c Mon Sep 17 00:00:00 2001
From: SamarV-121 <samar@samarv121.dev>
Date: Thu, 30 Nov 2023 15:41:12 +0530
Subject: [PATCH 7/9] PixelPropsUtils: Dynamically spoof props for GMS

neobuddy89: Adapted for PixelPropsUtils. Use local props as fallback.
mytja: Adapted for PixelOS' PropImitationHooks.

Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
Signed-off-by: mytja <mitja@severkar.eu>
---
 .../internal/util/PropImitationHooks.java     |  57 +++++-
 .../server/crdroid/AttestationService.java    | 170 ++++++++++++++++++
 .../java/com/android/server/SystemServer.java |   6 +
 3 files changed, 230 insertions(+), 3 deletions(-)
 create mode 100644 services/core/java/com/android/server/crdroid/AttestationService.java

diff --git a/core/java/com/android/internal/util/PropImitationHooks.java b/core/java/com/android/internal/util/PropImitationHooks.java
index 5927b70a4..162c4767e 100644
--- a/core/java/com/android/internal/util/PropImitationHooks.java
+++ b/core/java/com/android/internal/util/PropImitationHooks.java
@@ -26,6 +26,7 @@ import android.content.Context;
 import android.content.res.Resources;
 import android.os.Build;
 import android.os.Binder;
+import android.os.Environment;
 import android.os.Process;
 import android.os.SystemProperties;
 import android.text.TextUtils;
@@ -33,8 +34,18 @@ import android.util.Log;
 
 import com.android.internal.R;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
 import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -42,6 +53,7 @@ import java.util.Set;
  * @hide
  */
 public class PropImitationHooks {
+    private static final String DATA_FILE = "gms_certified_props.json";
 
     private static final String TAG = "PropImitationHooks";
     private static final boolean DEBUG = SystemProperties.getBoolean("debug.pihooks.log", false);
@@ -162,7 +174,7 @@ public class PropImitationHooks {
             "PIXEL_2024_MIDYEAR_EXPERIENCE"
     );
 
-    private static volatile String[] sCertifiedProps;
+    private static volatile List<String> sCertifiedProps = new ArrayList<>();
     private static volatile String sStockFp, sNetflixModel;
 
     private static volatile String sProcessName;
@@ -183,7 +195,29 @@ public class PropImitationHooks {
             return;
         }
 
-        sCertifiedProps = res.getStringArray(R.array.config_certifiedBuildProperties);
+        File dataFile = new File(Environment.getDataSystemDirectory(), DATA_FILE);
+        String savedProps = readFromFile(dataFile);
+
+        if (TextUtils.isEmpty(savedProps)) {
+            Log.d(TAG, "Parsing props locally - data file unavailable");
+            sCertifiedProps = Arrays.asList(res.getStringArray(R.array.config_certifiedBuildProperties));
+        } else {
+            Log.d(TAG, "Parsing props fetched by attestation service");
+            try {
+                JSONObject parsedProps = new JSONObject(savedProps);
+                Iterator<String> keys = parsedProps.keys();
+
+                while (keys.hasNext()) {
+                    String key = keys.next();
+                    String value = parsedProps.getString(key);
+                    sCertifiedProps.add(key + ":" + value);
+                }
+            } catch (JSONException e) {
+                Log.e(TAG, "Error parsing JSON data", e);
+                Log.d(TAG, "Parsing props locally as fallback");
+                sCertifiedProps = Arrays.asList(res.getStringArray(R.array.config_certifiedBuildProperties));
+            }
+        }
         sStockFp = res.getString(R.string.config_stockFingerprint);
         sNetflixModel = res.getString(R.string.config_netflixSpoofModel);
 
@@ -287,7 +321,7 @@ public class PropImitationHooks {
             return;
         }
 
-        if (sCertifiedProps.length == 0) {
+        if (sCertifiedProps.isEmpty()) {
             dlog("Certified props are not set");
             return;
         }
@@ -402,6 +436,23 @@ public class PropImitationHooks {
         return has;
     }
 
+    private static String readFromFile(File file) {
+        StringBuilder content = new StringBuilder();
+
+        if (file.exists()) {
+            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
+                String line;
+
+                while ((line = reader.readLine()) != null) {
+                    content.append(line);
+                }
+            } catch (IOException e) {
+                Log.e(TAG, "Error reading from file", e);
+            }
+        }
+        return content.toString();
+    }
+
     public static void dlog(String msg) {
         if (DEBUG) Log.d(TAG, "[" + sProcessName + "] " + msg);
     }
diff --git a/services/core/java/com/android/server/crdroid/AttestationService.java b/services/core/java/com/android/server/crdroid/AttestationService.java
new file mode 100644
index 000000000..be8aa9248
--- /dev/null
+++ b/services/core/java/com/android/server/crdroid/AttestationService.java
@@ -0,0 +1,170 @@
+/*
+ * Copyright (C) 2024 The LeafOS Project
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ */
+
+package com.android.server.crdroid;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkCapabilities;
+import android.os.Environment;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import com.android.server.SystemService;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URI;
+import java.net.URL;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+public final class AttestationService extends SystemService {
+
+    private static final String TAG = AttestationService.class.getSimpleName();
+    private static final String API = "https://raw.githubusercontent.com/crdroidandroid/android_vendor_certification/refs/heads/15.0/gms_certified_props.json";
+
+    private static final String DATA_FILE = "gms_certified_props.json";
+
+    private static final long INITIAL_DELAY = 0;
+    private static final long INTERVAL = 5;
+
+    private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
+    private static final boolean SPOOF_PIXEL_PI =
+            SystemProperties.getBoolean("persist.sys.pixelprops.pi", true);
+
+    private final Context mContext;
+    private final File mDataFile;
+    private final ScheduledExecutorService mScheduler;
+
+    public AttestationService(Context context) {
+        super(context);
+        mContext = context;
+        mDataFile = new File(Environment.getDataSystemDirectory(), DATA_FILE);
+        mScheduler = Executors.newSingleThreadScheduledExecutor();
+    }
+
+    @Override
+    public void onStart() {}
+
+    @Override
+    public void onBootPhase(int phase) {
+        if (SPOOF_PIXEL_PI && phase == PHASE_BOOT_COMPLETED) {
+            Log.i(TAG, "Scheduling the service");
+            mScheduler.scheduleAtFixedRate(
+                    new FetchGmsCertifiedProps(), INITIAL_DELAY, INTERVAL, TimeUnit.MINUTES);
+        }
+    }
+
+    private String readFromFile(File file) {
+        StringBuilder content = new StringBuilder();
+
+        if (file.exists()) {
+            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
+                String line;
+
+                while ((line = reader.readLine()) != null) {
+                    content.append(line);
+                }
+            } catch (IOException e) {
+                Log.e(TAG, "Error reading from file", e);
+            }
+        }
+        return content.toString();
+    }
+
+    private void writeToFile(File file, String data) {
+        try (FileWriter writer = new FileWriter(file)) {
+            writer.write(data);
+            // Set -rw-r--r-- (644) permission to make it readable by others.
+            file.setReadable(true, false);
+        } catch (IOException e) {
+            Log.e(TAG, "Error writing to file", e);
+        }
+    }
+
+    private String fetchProps() {
+        try {
+            URL url = new URI(API).toURL();
+            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+
+            try {
+                urlConnection.setConnectTimeout(10000);
+                urlConnection.setReadTimeout(10000);
+
+                try (BufferedReader reader =
+                        new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
+                    StringBuilder response = new StringBuilder();
+                    String line;
+
+                    while ((line = reader.readLine()) != null) {
+                        response.append(line);
+                    }
+
+                    return response.toString();
+                }
+            } finally {
+                urlConnection.disconnect();
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error making an API request", e);
+            return null;
+        }
+    }
+
+    private boolean isInternetConnected() {
+        ConnectivityManager cm =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        Network nw = cm.getActiveNetwork();
+        if (nw == null) return false;
+        NetworkCapabilities actNw = cm.getNetworkCapabilities(nw);
+        return actNw != null
+                && (actNw.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)
+                        || actNw.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)
+                        || actNw.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)
+                        || actNw.hasTransport(NetworkCapabilities.TRANSPORT_BLUETOOTH));
+    }
+
+    private void dlog(String message) {
+        if (DEBUG) Log.d(TAG, message);
+    }
+
+    private class FetchGmsCertifiedProps implements Runnable {
+        @Override
+        public void run() {
+            try {
+                dlog("FetchGmsCertifiedProps started");
+
+                if (!isInternetConnected()) {
+                    Log.e(TAG, "Internet unavailable");
+                    return;
+                }
+
+                String savedProps = readFromFile(mDataFile);
+                String props = fetchProps();
+
+                if (props != null && !savedProps.equals(props)) {
+                    dlog("Found new props");
+                    writeToFile(mDataFile, props);
+                    dlog("FetchGmsCertifiedProps completed");
+                } else {
+                    dlog("No change in props");
+                }
+            } catch (Exception e) {
+                Log.e(TAG, "Error in FetchGmsCertifiedProps", e);
+            }
+        }
+    }
+}
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 8b497ad86..f4ae9ea55 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -163,6 +163,7 @@ import com.android.server.contextualsearch.ContextualSearchManagerService;
 import com.android.server.coverage.CoverageService;
 import com.android.server.cpu.CpuMonitorService;
 import com.android.server.crashrecovery.CrashRecoveryAdaptor;
+import com.android.server.crdroid.AttestationService;
 import com.android.server.credentials.CredentialManagerService;
 import com.android.server.criticalevents.CriticalEventLog;
 import com.android.server.devicepolicy.DevicePolicyManagerService;
@@ -2786,6 +2787,11 @@ public final class SystemServer implements Dumpable {
             t.traceBegin("StartHealthService");
             mSystemServiceManager.startService(HealthInterfaceService.class);
             t.traceEnd();
+
+            // AttestationService
+            t.traceBegin("AttestationService");
+            mSystemServiceManager.startService(AttestationService.class);
+            t.traceEnd();
         }
 
         t.traceBegin("StartMediaProjectionManager");
-- 
2.34.1

